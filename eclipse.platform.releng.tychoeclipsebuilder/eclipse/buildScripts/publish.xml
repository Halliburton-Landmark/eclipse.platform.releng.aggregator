<project name="Publish Build" default="default">

<!-- Properties that must be passed to this script:
	buildDirectory: Path to perform the build in.  (A working directory)
	buildType:		Type of build (nightly, integration etc.)
	buildId:		Build name
	buildLabel:		<buildType>-<buildName>-<timestamp>
-->
<property name="result" value="${buildDirectory}/${buildLabel}" />

<!--name of generated index page-->
<property name="indexFileName" value="index.html" />

<target name="default">
	<antcall target="generateIndex" />
	<antcall target="getStaticFiles" />
</target>
	
<target name="generateIndex">
 
  <property name="class" value="org.eclipse.releng.generators.TestResultsGenerator" />
  <taskdef name="indexResults" classname="${class}" />
   
<!--
	isBuildTested:  true|false  should JUnit plugin test results be used to generate index page
	dropTokenList:  comma separated list of strings which should be replaced by the fileName attribute settings in the testManifest.xml.
	xmlDirectoryName:  path to directory containing JUnit plugin test results in xml format (see doc is org.eclipse.test).
	dropDirectoryName: path to directory containing the result of the build.
	testResultsTemplateFileName:  path to template file used to generate page with links to JUnit test results	
	testResultsHtmlFileName:  name of file which will be generated with links to JUnit test results
	dropHtmlFileName:  name of generated index page
	hrefTestResultsTargetPath:  relative path from index page to directory containing JUnit html test results
	hrefCompileLogsTargetPath:  relative path from index page directory containing compilelogs
	testManifestFileName:	name of xml file containing descriptions of zip types and log files

	
	
-->
	
	<property name="xmlDirectoryName" value="${result}/testresults/xml" />
	<property name="dropDirectoryName" value="${result}" />
	<property name="testResultsTemplateFileName" value="${basedir}/templateFiles/testResults.php.template" />
<!--	<property name="dropTemplateFileName" value="${basedir}/templateFiles/index.html.template" />  -->
	<property name="dropTemplateFileName" value="${basedir}/templateFiles/index.html.templatejava8patch" />
	<property name="testResultsHtmlFileName" value="testResults.php" />
	<property name="hrefTestResultsTargetPath" value="testresults/html" />
	<property name="hrefCompileLogsTargetPath" value="compilelogs" />
	<property name="compileLogsDirectoryName" value="${result}/compilelogs" />
	<property name="testManifestFileName" value="${basedir}/testManifest.xml" />

	
  <indexResults 
    isBuildTested="${isBuildTested}"
    buildType="${buildType}"
    dropTokenList="${dropTokenList}"
  	platformIdentifierToken="${platformIdentifierToken}"
  	platformSpecificTemplateList="${platformSpecificTemplateList}"
    dropHtmlFileName="${indexFileName}"
    xmlDirectoryName="${xmlDirectoryName}"
    dropDirectoryName="${dropDirectoryName}"
    testResultsTemplateFileName="${testResultsTemplateFileName}"
    dropTemplateFileName="${dropTemplateFileName}"
    testResultsHtmlFileName="${testResultsHtmlFileName}"
    hrefTestResultsTargetPath="${hrefTestResultsTargetPath}"
    hrefCompileLogsTargetPath="${hrefCompileLogsTargetPath}"
    compileLogsDirectoryName="${compileLogsDirectoryName}"
    testManifestFileName="${testManifestFileName}"
  />


    
    <!--  Insert Build Name ... apparently still required, until we can update indexing task directly -->
    <replace file="${result}/${indexFileName}" token="@build@" value="${buildId}"/>

    
    <replace dir="${result}" value="${buildId}">
      <include name="**/*.php"/>
      <replacetoken><![CDATA[@build@]]></replacetoken>
    </replace>
    
    <replace file="${result}/${indexFileName}" token="@buildlabel@" value="${buildId}"/>

    <replace dir="${result}" value="${buildId}">
      <include name="**/*.php"/>
      <replacetoken><![CDATA[@buildlabel@]]></replacetoken>
    </replace>
    
    <!-- TODO: fix so these replace's are not required -->    
    
</target>


<target name="getStaticFiles">
	<!--get static files required in the buildLabel directory-->
	<copy todir="${result}">
		<fileset dir="staticDropFiles" />
	</copy>
	
	<!--copy buildnotes from plugin directories-->
	<mkdir dir="${result}/buildnotes" />
	<copy todir="${result}/buildnotes" flatten="true">
		<fileset dir="${buildDirectory}/plugins" includes="**/buildnotes_*.html" />
	</copy>
</target>
	
</project>