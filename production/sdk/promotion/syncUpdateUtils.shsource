#!/usr/bin/env bash


function dropOnDLServer()
{
    eclipseStream=$1
    if [[ -z "${eclipseStream}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide eclipseStream as first argumnet, for this function $(basename $0)" >&2
        return 1;
    fi


    buildId=$2
    if [[ -z "${buildId}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide buildType as second argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    BUILD_TECH=$3
    if [[ -z "${BUILD_TECH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide BUILD_TECH as third argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    pathToDL=$( dlToPath "$eclipseStream" "$buildId" "$BUILD_TECH" )

    if [[ "$pathToDL" == 1 ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: pathToDL could not be computed." >&2
        return 1
    fi
    toDir="/home/data/httpd/download.eclipse.org/${pathToDL}"
    echo $toDir
}
function updateSiteOnDL()
{
    eclipseStream=$1
    if [[ -z "${eclipseStream}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide eclipseStream as first argumnet, for this function $(basename $0)" >&2
        return 1;
    fi


    buildId=$2
    if [[ -z "${buildId}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide buildType as second argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    BUILD_TECH=$3
    if [[ -z "${BUILD_TECH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide BUILD_TECH as third argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    # contrary to intuition (and previous behavior, bash 3.1) do NOT use quotes around right side of expression.
    if [[ "${eclipseStream}" =~ ([[:digit:]]*)\.([[:digit:]]*)\.([[:digit:]]*) ]]
    then
        eclipseStreamMajor=${BASH_REMATCH[1]}
        eclipseStreamMinor=${BASH_REMATCH[2]}
        eclipseStreamService=${BASH_REMATCH[3]}
    else
        echo "ERROR: eclipseStream, $eclipseStream, must contain major, minor, and service versions, such as 4.2.0" >&2
        exit 1
    fi
    buildType=${buildId:0:1}

    toSiteDir="/home/data/httpd/download.eclipse.org/eclipse/updates"

    if [[ "${BUILD_TECH}" == 'CBI' ]]
    then 
        updatesSuffix="builds"
    elif  [[ "${BUILD_TECH}" == 'PDE' ]]
    then
        updatesSuffix="buildspdebased"
    else
        echo "ERROR: Unexpected value of BUILD_TECH, $BUILD_TECH"  >&2
    fi

    toMainUpdateDir=$toSiteDir/${eclipseStreamMajor}.${eclipseStreamMinor}-${buildType}-${updatesSuffix}/
    echo $toMainUpdateDir
}
# compute update site on build server
function updateSiteOnBuildDir()
{
    eclipseStream=$1
    if [[ -z "${eclipseStream}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide eclipseStream as first argumnet, for this function $(basename $0)" >&2
        return 1;
    fi


    buildId=$2
    if [[ -z "${buildId}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide buildType as second argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    BUILD_TECH=$3
    if [[ -z "${BUILD_TECH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide BUILD_TECH as third argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    # contrary to intuition (and previous behavior, bash 3.1) do NOT use quotes around right side of expression.
    if [[ "${eclipseStream}" =~ ([[:digit:]]*)\.([[:digit:]]*)\.([[:digit:]]*) ]]
    then
        eclipseStreamMajor=${BASH_REMATCH[1]}
        eclipseStreamMinor=${BASH_REMATCH[2]}
        eclipseStreamService=${BASH_REMATCH[3]}
    else
        echo "eclipseStream, $eclipseStream, must contain major, minor, and service versions, such as 4.2.0" >&2
        return 1
    fi
    buildType=${buildId:0:1}

    if [[ "${BUILD_TECH}" == 'CBI' ]]
    then 
        buildRoot=/shared/eclipse/builds/${eclipseStreamMajor}${buildType}
    elif [[ "${BUILD_TECH}" == 'PDE' ]]
    then
        buildRoot=/shared/eclipse/eclipse${eclipseStreamMajor}${buildType}
    else
        echo "ERROR: Unexpected value of BUILD_TECH, $BUILD_TECH" >&2
        return 1
    fi



    if [[ "${BUILD_TECH}" == 'CBI' ]]
    then 
        siteDir=${buildRoot}/siteDir
        updatesSuffix="builds"
        fromDir=$siteDir/updates/${eclipseStreamMajor}.${eclipseStreamMinor}-${buildType}-${updatesSuffix}/${buildId}

    elif [[ "${BUILD_TECH}" == 'PDE' ]]
    then
        siteDir=${buildRoot}/siteDir
        updatesSuffix="buildspdebased"
        fromDir=$siteDir/updates/${eclipseStreamMajor}.${eclipseStreamMinor}-${buildType}-${updatesSuffix}/${buildId}
    else
        echo "ERROR: Unexpected value of BUILD_TECH, $BUILD_TECH" >&2
        return 1
    fi

    echo $fromDir
}

# compute main part of download server drop directory
function dropFromBuildDir ()
{

    eclipseStream=$1
    buildId=$2
    BUILD_TECH=$3
    pathFromDL=$( dlFromPath "$eclipseStream" "$buildId" "$BUILD_TECH" )


    if [[ "$pathFromDL" == 1 ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: pathToDL could not be computed." >&2
        return 1
    fi

    eclipseStreamMajor=${eclipseStream:0:1}
    buildType=${buildId:0:1}

    if [[ "${BUILD_TECH}" == 'CBI' ]]
    then 
        buildRoot=/shared/eclipse/builds/${eclipseStreamMajor}${buildType}
    elif [[ "${BUILD_TECH}" == 'PDE' ]]
    then
        buildRoot=/shared/eclipse/eclipse${eclipseStreamMajor}${buildType}
    else
        echo "ERROR: BUILD_TECH value not recognized, $BUILD_TECH" >&2
        return 1
    fi

    siteDir=${buildRoot}/siteDir

    fromDir=${siteDir}/${pathFromDL}/${buildId}

    echo "$fromDir"

}

# compute main (middle part) of download site
function dlToPath()
{
    eclipseStream=$1
    if [[ -z "${eclipseStream}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide eclipseStream as first argumnet, for this function $(basename $0)" >&2
        return 1;
    fi


    buildId=$2
    if [[ -z "${buildId}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide buildId as second argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    BUILD_TECH=$3
    if [[ -z "${BUILD_TECH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide BUILD_TECH as third argumnet, for this function $(basename $0)" >&2
        return 1;
    fi



    eclipseStreamMajor=${eclipseStream:0:1}
    buildType=${buildId:0:1}

    #TODO: eventual switch so CBI is "normal" one and PDE is marked one
    if [[ "${BUILD_TECH}" == 'CBI' ]]
    then 
        dropsuffix=""
    else
        dropsuffix="pdebased"
    fi

    pathToDL=eclipse/downloads/drops
    if [[ $eclipseStreamMajor > 3 ]]
    then
        pathToDL=$pathToDL$eclipseStreamMajor
    fi

    pathToDL=$pathToDL$dropsuffix
    #echo "pathToDL: $pathToDL"
    echo $pathToDL
}

# compute main (left part) of download site (This is needed only for PDE?)
# because we want "from" on build machine to stay the same, only change "to" part, to be "pdebased"
function dlFromPath()
{
    eclipseStream=$1
    if [[ -z "${eclipseStream}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide eclipseStream as first argumnet, for this function $(basename $0)" >&2
        return 1;
    fi


    buildId=$2
    if [[ -z "${buildId}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide buildId as second argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    BUILD_TECH=$3
    if [[ -z "${BUILD_TECH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide BUILD_TECH as third argumnet, for this function $(basename $0)" >&2
        return 1;
    fi

    eclipseStreamMajor=${eclipseStream:0:1}
    buildType=${buildId:0:1}



    pathFromDL=eclipse/downloads/drops
    if [[ $eclipseStreamMajor > 3 ]]
    then
        pathFromDL=$pathFromDL$eclipseStreamMajor
    fi

    echo $pathFromDL
}


function syncDropLocation ()
{
    echo "start syncDropLocation"
    eclipseStream=$1
    if [[ -z "${eclipseStream}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide eclipseStream as first argumnet, for this function $(basename $0)" >&2
        return 1;
    fi
    echo "eclipseStream: $eclipseStream"

    buildId=$2
    if [[ -z "${buildId}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide buildId as second argumnet, for this function $(basename $0)" >&2
        return 1;
    fi
    echo "buildId: $buildId"

    BUILD_TECH=$3
    if [[ -z "${BUILD_TECH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide BUILD_TECH as third argumnet, for this function $(basename $0)" >&2
        return 1;
    fi
    echo "BUILD_TECH: $BUILD_TECH"

    EBUILDER_HASH=$4
    if [[ -z "${EBUILDER_HASH}" ]]
    then
        printf "\n\n\t%s\n\n" "ERROR: Must provide builder (or aggregator) hash as fourth argumnet, for this function $(basename $0)" >&2
        return 1;
    fi
    echo "EBUILDER_HASH: $EBUILDER_HASH"

    eclipseStreamMajor=${eclipseStream:0:1}
    buildType=${buildId:0:1}

    fromDir=$( dropFromBuildDir $eclipseStream $buildId $BUILD_TECH )
    if [[ ! -d "${fromDir}" ]]
    then
        echo "ERROR: fromDir is not a directory? fromDir: ${fromDir}"
        return 1
    fi


    toDir=$( dropOnDLServer $eclipseStream $buildId $BUILD_TECH )
    if [[ ! -d "${toDir}" ]]
    then
        echo "ERROR: toDir is not a directory? toDir: ${toDir}"
        return 1
    fi

    echo "   fromDir: ${fromDir}" >&2
    echo "     toDir: ${toDir}" >&2

    # here, for dl site, best not to preserve times, since (if mirrored)
    # would be more accurate for mirroring system to have
    # actual times (and we are copying only one specific
    # sub-sirectory) (But, we do for now, for easier testing) 
    if [[ -n "${fromDir}" && -d "${fromDir}" && -n "${toDir}" && -d "${toDir}" ]]
    then
        rsync --recursive --exclude="*apitoolingreference*" --exclude="*org.eclipse.releng.basebuilder*" --exclude="*eclipse.platform.releng.aggregator*" --exclude="*repository*" --exclude="*workspace-*" "${fromDir}" "${toDir}"
        rccode=$?
    else
        rccode=9
    fi
    if [[ $rccode != 0 ]]
    then
        echo "ERROR: rsync did not complete normally.rccode: $rccode"
        return $rccode
    else
        # Now update main DL page index pages, to show available
        source /shared/eclipse/sdk/updateIndexFilesFunction.shsource
        updateIndex $eclipseStreamMajor $BUILD_TECH
    fi



    echo "ending syncDropLocation"
}
