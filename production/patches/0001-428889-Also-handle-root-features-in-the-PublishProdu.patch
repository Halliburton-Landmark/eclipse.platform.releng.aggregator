From 1fb62db982c6ad58e50cb06a73309281102eba5f Mon Sep 17 00:00:00 2001
From: Tobias Oberlies <tobias.oberlies@sap.com>
Date: Thu, 12 Feb 2015 17:25:43 +0100
Subject: [PATCH 1/4] 428889 Also handle root features in the
 PublishProductTool

TODO test ArtifactTypeHelper change

- Consume enhancements of p2 that allow to get the root features from
  the IProductDescriptor. With this change, we now have all of the
  product publishing build steps on the OSGi classloader side, which
  e.g. allows for more integrated unit tests.
- Also, the p2 ProductAction no longer includes root features in the
  product IU, so we no longer need to filter them ourselves.

Bug: 428889
Bug: 373817
Change-Id: Icbc6506deda86ab34a0c778c832481b870c4d8e8
---
 .../eclipse/tycho/artifacts/TargetPlatform.java    |   2 +-
 .../tycho/p2/target/TargetPlatformTest.java        |  26 ++---
 .../p2/impl/publisher/model/ProductFile2.java      |  15 ++-
 .../tycho/p2/target/ArtifactTypeHelper.java        |  13 +++
 .../eclipse/tycho/p2/target/P2TargetPlatform.java  |   9 +-
 .../tycho/p2/target/TargetPlatformBaseImpl.java    |  10 +-
 .../tycho/p2/tools/publisher/ExpandedProduct.java  | 117 ++++++++-------------
 .../publisher/ProductVersionExpansionRun.java      | 102 ++++++++++++++++++
 .../p2/tools/publisher/PublishProductToolImpl.java |  36 +++++--
 .../tools/publisher/facade/PublishProductTool.java |   7 +-
 .../products/pluginProductWithLeftovers.product    |   1 +
 .../p2/tools/publisher/PublishProductToolTest.java |  63 +++++++----
 .../tycho/p2/testutil/InstallableUnitMatchers.java |  16 +++
 .../tycho-bundles-target.target                    |   5 +-
 .../plugins/p2/publisher/PublishProductMojo.java   |  27 +----
 .../p2/publisher/PublishProductMojoUnitTest.java   |  54 ----------
 .../unitTestResources/rootFeatures.product         |  23 ----
 .../tycho/packaging/FeatureXmlTransformer.java     |   4 +-
 .../tycho/packaging/FeatureXmlTransformerTest.java |   4 +-
 19 files changed, 291 insertions(+), 243 deletions(-)
 create mode 100644 tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ProductVersionExpansionRun.java
 delete mode 100644 tycho-p2/tycho-p2-publisher-plugin/src/test/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojoUnitTest.java
 delete mode 100644 tycho-p2/tycho-p2-publisher-plugin/src/test/resources/unitTestResources/rootFeatures.product

diff --git a/tycho-bundles/org.eclipse.tycho.core.shared/src/main/java/org/eclipse/tycho/artifacts/TargetPlatform.java b/tycho-bundles/org.eclipse.tycho.core.shared/src/main/java/org/eclipse/tycho/artifacts/TargetPlatform.java
index be86a13..bdd7322 100644
--- a/tycho-bundles/org.eclipse.tycho.core.shared/src/main/java/org/eclipse/tycho/artifacts/TargetPlatform.java
+++ b/tycho-bundles/org.eclipse.tycho.core.shared/src/main/java/org/eclipse/tycho/artifacts/TargetPlatform.java
@@ -58,7 +58,7 @@ public interface TargetPlatform {
      *             if there is no matching artifact in the target platform.
      */
     // TODO For the final TP, all versions are expanded - but ArtifactKey specifies that contains versions with non-expanded qualifiers; use a different type?
-    ArtifactKey resolveReference(String type, String id, String versionRef) throws IllegalArtifactReferenceException,
+    ArtifactKey resolveArtifact(String type, String id, String versionRef) throws IllegalArtifactReferenceException,
             DependencyResolutionException;
 
     /**
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/target/TargetPlatformTest.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/target/TargetPlatformTest.java
index 032bf2c..329a844 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/target/TargetPlatformTest.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/target/TargetPlatformTest.java
@@ -51,7 +51,7 @@ public class TargetPlatformTest {
 
     @Test
     public void testResolveFixedVersion() throws Exception {
-        ArtifactKey key = subject.resolveReference("eclipse-plugin", "some.bundle", "1.1.0.v2013");
+        ArtifactKey key = subject.resolveArtifact("eclipse-plugin", "some.bundle", "1.1.0.v2013");
 
         assertThat(key.getType(), is(ArtifactType.TYPE_ECLIPSE_PLUGIN));
         assertThat(key.getId(), is("some.bundle"));
@@ -63,7 +63,7 @@ public class TargetPlatformTest {
         exceptions.expect(not(isA(IllegalArtifactReferenceException.class))); // not a problem with the syntax
         exceptions.expectMessage("not found in the target platform");
 
-        subject.resolveReference("eclipse-plugin", "other.bundle", "1.0.0");
+        subject.resolveArtifact("eclipse-plugin", "other.bundle", "1.0.0");
     }
 
     @Test
@@ -71,7 +71,7 @@ public class TargetPlatformTest {
         exceptions.expect(IllegalArtifactReferenceException.class);
         exceptions.expectMessage("ID is required");
 
-        subject.resolveReference("eclipse-plugin", null, "1.0.0");
+        subject.resolveArtifact("eclipse-plugin", null, "1.0.0");
     }
 
     @Test
@@ -79,12 +79,12 @@ public class TargetPlatformTest {
         exceptions.expect(IllegalArtifactReferenceException.class);
         exceptions.expectMessage("is not a valid OSGi version");
 
-        subject.resolveReference("eclipse-plugin", "other.bundle", "1.0.0-SNAPSHOT");
+        subject.resolveArtifact("eclipse-plugin", "other.bundle", "1.0.0-SNAPSHOT");
     }
 
     @Test
     public void testResolveLatestVersionThroughZeros() throws Exception {
-        ArtifactKey key = subject.resolveReference("eclipse-plugin", "some.bundle", "0.0.0");
+        ArtifactKey key = subject.resolveArtifact("eclipse-plugin", "some.bundle", "0.0.0");
 
         assertThat(key.getVersion(), is("1.2.0"));
     }
@@ -92,21 +92,21 @@ public class TargetPlatformTest {
     @Test
     public void testResolveLatestVersionThroughOmittedVersion() throws Exception {
         // e.g. when version attribute is omitted
-        ArtifactKey key = subject.resolveReference("eclipse-plugin", "some.bundle", null);
+        ArtifactKey key = subject.resolveArtifact("eclipse-plugin", "some.bundle", null);
 
         assertThat(key.getVersion(), is("1.2.0"));
     }
 
     @Test
     public void testResolveLatestQualifierWithQualifierLiteral() throws Exception {
-        ArtifactKey key = subject.resolveReference("eclipse-plugin", "some.bundle", "1.1.0.qualifier");
+        ArtifactKey key = subject.resolveArtifact("eclipse-plugin", "some.bundle", "1.1.0.qualifier");
 
         assertThat(key.getVersion(), is("1.1.0.v2014"));
     }
 
     @Test
     public void testResolveFixedVersionForThreeSegmentVersion() throws Exception {
-        ArtifactKey key = subject.resolveReference("eclipse-plugin", "some.bundle", "1.1.0");
+        ArtifactKey key = subject.resolveArtifact("eclipse-plugin", "some.bundle", "1.1.0");
 
         // three-segment versions don't have a special semantic in the PDE, so 1.1.0 doesn't resolve to 1.1.0.v2014 (cf. bug 373844)
         assertThat(key.getVersion(), is("1.1.0"));
@@ -117,7 +117,7 @@ public class TargetPlatformTest {
         candidateIUs = createSet(createBundleIU("unit", "1.0.0"), createProductIU("unit", "1.99.0"));
         subject = createTP();
 
-        ArtifactKey key = subject.resolveReference("eclipse-plugin", "unit", ANY_VERSION);
+        ArtifactKey key = subject.resolveArtifact("eclipse-plugin", "unit", ANY_VERSION);
 
         assertThat(key.getType(), is(ArtifactType.TYPE_ECLIPSE_PLUGIN));
         assertThat(key.getId(), is("unit"));
@@ -129,7 +129,7 @@ public class TargetPlatformTest {
         candidateIUs = createSet(createBundleIU("unit", "2.0.0"), createProductIU("unit", "1.99.0"));
         subject = createTP();
 
-        ArtifactKey key = subject.resolveReference("eclipse-product", "unit", ANY_VERSION);
+        ArtifactKey key = subject.resolveArtifact("eclipse-product", "unit", ANY_VERSION);
 
         assertThat(key.getType(), is(ArtifactType.TYPE_ECLIPSE_PRODUCT));
         assertThat(key.getId(), is("unit"));
@@ -141,7 +141,7 @@ public class TargetPlatformTest {
         candidateIUs = createSet(createBundleIU("unit", "2.0.0"), createProductIU("unit", "1.99.0"));
         subject = createTP();
 
-        ArtifactKey key = subject.resolveReference("p2-installable-unit", "unit", ANY_VERSION);
+        ArtifactKey key = subject.resolveArtifact("p2-installable-unit", "unit", ANY_VERSION);
 
         assertThat(key.getType(), is(ArtifactType.TYPE_INSTALLABLE_UNIT));
         assertThat(key.getId(), is("unit"));
@@ -154,7 +154,7 @@ public class TargetPlatformTest {
                 createFeatureIU("unit", "1.2.0"));
         subject = createTP();
 
-        ArtifactKey key = subject.resolveReference("eclipse-feature", "unit", ANY_VERSION);
+        ArtifactKey key = subject.resolveArtifact("eclipse-feature", "unit", ANY_VERSION);
 
         assertThat(key.getType(), is(ArtifactType.TYPE_ECLIPSE_FEATURE));
         assertThat(key.getId(), is("unit")); // id is feature id
@@ -166,7 +166,7 @@ public class TargetPlatformTest {
         exceptions.expect(IllegalArtifactReferenceException.class);
         exceptions.expectMessage("Unknown artifact type");
 
-        subject.resolveReference("invalid-type", "unit", ANY_VERSION);
+        subject.resolveArtifact("invalid-type", "unit", ANY_VERSION);
     }
 
     private FinalTargetPlatformImpl createTP() {
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/impl/publisher/model/ProductFile2.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/impl/publisher/model/ProductFile2.java
index df3a158..4ac1e5a 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/impl/publisher/model/ProductFile2.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/impl/publisher/model/ProductFile2.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008, 2011 Sonatype Inc. and others.
+ * Copyright (c) 2008, 2015 Sonatype Inc. and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,10 @@
  *******************************************************************************/
 package org.eclipse.tycho.p2.impl.publisher.model;
 
+import java.util.List;
+
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ProductFile;
+import org.eclipse.equinox.p2.metadata.IVersionedId;
 import org.eclipse.equinox.p2.publisher.eclipse.FeatureEntry;
 import org.xml.sax.Attributes;
 
@@ -49,4 +52,14 @@ public class ProductFile2 extends ProductFile {
             plugins.add(entry);
         }
     }
+
+    @Override
+    public List<IVersionedId> getFeatures() {
+        /*
+         * Unlike the final IU, the dependency-only IU shall depend on root features so that the
+         * dependency resolver correctly discovers dependencies to root features from the reactor.
+         */
+        return getFeatures(INCLUDED_FEATURES | ROOT_FEATURES);
+    }
+
 }
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/ArtifactTypeHelper.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/ArtifactTypeHelper.java
index 6ca2999..3141f30 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/ArtifactTypeHelper.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/ArtifactTypeHelper.java
@@ -17,6 +17,7 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IRequirement;
 import org.eclipse.equinox.p2.metadata.MetadataFactory;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.metadata.VersionRange;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
@@ -24,6 +25,7 @@ import org.eclipse.equinox.p2.query.IQuery;
 import org.eclipse.equinox.p2.query.QueryUtil;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 import org.eclipse.tycho.ArtifactType;
+import org.eclipse.tycho.DefaultArtifactKey;
 import org.eclipse.tycho.artifacts.IllegalArtifactReferenceException;
 
 @SuppressWarnings("restriction")
@@ -101,6 +103,17 @@ public class ArtifactTypeHelper {
         return MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, id, versionRange, null, false, true);
     }
 
+    public static org.eclipse.tycho.ArtifactKey toTychoArtifact(IInstallableUnit unit) {
+        // TODO unit test & add more cases
+        if (Boolean.valueOf(unit.getProperty(InstallableUnitDescription.PROP_TYPE_GROUP))) {
+            // TODO check suffix
+            String id = unit.getId();
+            return new DefaultArtifactKey(ArtifactType.TYPE_ECLIPSE_FEATURE, id.substring(0, id.length()
+                    - ".feature.group".length()), unit.getVersion().toString());
+        }
+        throw new IllegalArgumentException(unit.toString());
+    }
+
     // p2 artifacts
 
     public static IArtifactKey toP2ArtifactKey(org.eclipse.tycho.ArtifactKey artifact) {
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/P2TargetPlatform.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/P2TargetPlatform.java
index f7da489..071246b 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/P2TargetPlatform.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/P2TargetPlatform.java
@@ -19,7 +19,6 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepository;
-import org.eclipse.tycho.ArtifactKey;
 import org.eclipse.tycho.ReactorProjectIdentities;
 import org.eclipse.tycho.artifacts.DependencyResolutionException;
 import org.eclipse.tycho.artifacts.IllegalArtifactReferenceException;
@@ -75,9 +74,13 @@ public interface P2TargetPlatform extends TargetPlatform {
     void saveLocalMavenRepository();
 
     /**
-     * @see #resolveReference(String, String, String)
+     * Same as {@link #resolveArtifact(String, String, String)} but returning the result as
+     * {@link IInstallableUnit}.
+     * 
+     * Note: "artifact" in "resolveArtifact" refers to a Tycho artifact, which technically represent
+     * a p2 installable unit and optionally the associated p2 artifact.
      */
-    ArtifactKey resolveReference(String type, String id, Version version) throws IllegalArtifactReferenceException,
+    IInstallableUnit resolveUnit(String type, String id, Version version) throws IllegalArtifactReferenceException,
             DependencyResolutionException;
 
 }
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/TargetPlatformBaseImpl.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/TargetPlatformBaseImpl.java
index 96f5de4..d075c73 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/TargetPlatformBaseImpl.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/target/TargetPlatformBaseImpl.java
@@ -84,13 +84,14 @@ abstract class TargetPlatformBaseImpl implements P2TargetPlatform {
     }
 
     @Override
-    public final org.eclipse.tycho.ArtifactKey resolveReference(String type, String id, String version)
+    public final org.eclipse.tycho.ArtifactKey resolveArtifact(String type, String id, String version)
             throws IllegalArtifactReferenceException, DependencyResolutionException {
-        return resolveReference(type, id, ArtifactMatcher.parseAsOSGiVersion(version));
+        IInstallableUnit resolvedUnit = resolveUnit(type, id, ArtifactMatcher.parseAsOSGiVersion(version));
+        return new DefaultArtifactKey(type, id, resolvedUnit.getVersion().toString());
     }
 
     @Override
-    public final org.eclipse.tycho.ArtifactKey resolveReference(String type, String id, Version version)
+    public final IInstallableUnit resolveUnit(String type, String id, Version version)
             throws IllegalArtifactReferenceException, DependencyResolutionException {
 
         IInstallableUnit matchingUnit = ArtifactMatcher.resolveReference(type, id, version, installableUnits);
@@ -104,8 +105,7 @@ abstract class TargetPlatformBaseImpl implements P2TargetPlatform {
             }
             throw new DependencyResolutionException(message);
         }
-
-        return new DefaultArtifactKey(type, id, matchingUnit.getVersion().toString());
+        return matchingUnit;
     }
 
     @Override
diff --git a/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ExpandedProduct.java b/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ExpandedProduct.java
index b09eb4f..ce59df8 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ExpandedProduct.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ExpandedProduct.java
@@ -11,23 +11,19 @@
 package org.eclipse.tycho.p2.tools.publisher;
 
 import java.io.File;
-import java.util.ArrayList;
+import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Set;
 
 import org.eclipse.equinox.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.IProductDescriptor;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ProductContentType;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IVersionedId;
-import org.eclipse.equinox.p2.metadata.VersionedId;
 import org.eclipse.equinox.p2.repository.IRepositoryReference;
-import org.eclipse.tycho.ArtifactKey;
 import org.eclipse.tycho.ArtifactType;
-import org.eclipse.tycho.artifacts.DependencyResolutionException;
-import org.eclipse.tycho.artifacts.IllegalArtifactReferenceException;
 import org.eclipse.tycho.core.shared.Interpolator;
 import org.eclipse.tycho.core.shared.MavenLogger;
 import org.eclipse.tycho.core.shared.MultiLineLogger;
@@ -45,20 +41,19 @@ class ExpandedProduct implements IProductDescriptor {
     private final String expandedVersion;
     private List<IVersionedId> expandedBundles = null;
     private List<IVersionedId> expandedFeatures = null;
+    private List<IInstallableUnit> expandedRootFeatures = Collections.emptyList();
 
     private final MultiLineLogger logger;
 
-    // TODO 428889 this information should come from the IProductDescriptor
-    private Set<String> rootFeatures;
-
     public ExpandedProduct(IProductDescriptor originalProduct, String buildQualifier, P2TargetPlatform targetPlatform,
-            Interpolator interpolator, MavenLogger logger, Set<String> rootFeatures) {
+            Interpolator interpolator, MavenLogger logger) {
         this.defaults = originalProduct;
-        this.rootFeatures = rootFeatures;
         this.expandedVersion = VersioningHelper.expandQualifier(originalProduct.getVersion(), buildQualifier);
         this.targetPlatform = targetPlatform;
         this.interpolator = interpolator;
         this.logger = new MultiLineLogger(logger);
+
+        expandVersions();
     }
 
     @Override
@@ -78,10 +73,6 @@ class ExpandedProduct implements IProductDescriptor {
             return defaults.getBundles(includeFragments);
         }
 
-        if (expandedBundles == null) {
-            expandedBundles = resolveReferences("plugin", ArtifactType.TYPE_ECLIPSE_PLUGIN,
-                    defaults.getBundles(includeFragments));
-        }
         return expandedBundles;
     }
 
@@ -93,73 +84,37 @@ class ExpandedProduct implements IProductDescriptor {
 
     @Override
     public List<IVersionedId> getFeatures() {
-        if (getProductContentType() == ProductContentType.BUNDLES) {
-            // TODO add hasFeatures() method to avoid this method to be called in bundle-based products
-            return defaults.getFeatures();
-        }
-        if (expandedFeatures == null) {
-            expandedFeatures = resolveReferences("feature", ArtifactType.TYPE_ECLIPSE_FEATURE,
-                    filter(defaults.getFeatures(), rootFeatures));
-        }
-        return expandedFeatures;
+        return getFeatures(INCLUDED_FEATURES);
     }
 
-    private List<IVersionedId> filter(List<IVersionedId> source, Set<String> toRemove) {
-        List<IVersionedId> result = new ArrayList<IVersionedId>();
-        for (IVersionedId entry : source) {
-            if (toRemove.contains(entry.getId())) {
-                // remove
-            } else {
-                result.add(entry);
-            }
-        }
-        return result;
-    }
-
-    private List<IVersionedId> resolveReferences(String elementName, String artifactType, List<IVersionedId> references) {
-        List<IVersionedId> result = new ArrayList<IVersionedId>(references.size());
-        StringBuilder errors = null;
-
-        for (IVersionedId reference : references) {
-            try {
-                ArtifactKey resolvedReference = targetPlatform.resolveReference(artifactType, reference.getId(),
-                        reference.getVersion());
-                result.add(new VersionedId(resolvedReference.getId(), resolvedReference.getVersion()));
-
-            } catch (IllegalArtifactReferenceException e) {
-                errors = initReferenceResolutionError(errors);
-                errors.append("  Invalid <").append(elementName).append("> element with id=")
-                        .append(quote(reference.getId()));
-                if (reference.getVersion() != null) {
-                    errors.append(" and version=").append(quote(reference.getVersion()));
-                }
-                errors.append(": ").append(e.getMessage()).append('\n');
-            } catch (DependencyResolutionException e) {
-                errors = initReferenceResolutionError(errors);
-                errors.append("  ").append(e.getMessage()).append('\n');
-            }
-        }
-
-        if (errors != null) {
-            logger.error(errors.toString());
-            throw new DependencyResolutionException("Cannot resolve dependencies of product " + getLocation().getName()
-                    + ". See log for details.");
+    @Override
+    public List<IVersionedId> getFeatures(int options) {
+        if (options == INCLUDED_FEATURES) {
+            return expandedFeatures;
+        } else {
+            // currently not needed by the publisher action -> omitted for simplicity
+            throw new UnsupportedOperationException();
         }
-        return result;
     }
 
-    private StringBuilder initReferenceResolutionError(StringBuilder errors) {
-        if (errors == null)
-            return new StringBuilder("Cannot resolve dependencies of product " + getLocation().getName() + ":\n");
-        else
-            return errors;
+    public List<IInstallableUnit> getRootFeatures() {
+        return expandedRootFeatures;
     }
 
-    private static String quote(Object nullableObject) {
-        if (nullableObject == null)
-            return null;
-        else
-            return "\"" + nullableObject + "\"";
+    private void expandVersions() {
+        ProductContentType contentType = getProductContentType();
+        ProductVersionExpansionRun resolver = new ProductVersionExpansionRun(targetPlatform, getLocation());
+        if (contentType != ProductContentType.FEATURES) {
+            expandedBundles = resolver.resolveReferences("plugin", ArtifactType.TYPE_ECLIPSE_PLUGIN,
+                    defaults.getBundles(true));
+        }
+        if (contentType != ProductContentType.BUNDLES) {
+            expandedFeatures = resolver.resolveReferences("feature", ArtifactType.TYPE_ECLIPSE_FEATURE,
+                    defaults.getFeatures(INCLUDED_FEATURES));
+            expandedRootFeatures = resolver.resolveReferencesToIUs("feature", ArtifactType.TYPE_ECLIPSE_FEATURE,
+                    defaults.getFeatures(ROOT_FEATURES));
+        }
+        resolver.reportErrors(logger);
     }
 
     @Override
@@ -183,6 +138,18 @@ class ExpandedProduct implements IProductDescriptor {
     // delegating methods
 
     @Override
+    public boolean hasBundles(boolean includeFragments) {
+        // don't need to expand versions for this check
+        return defaults.hasBundles(includeFragments);
+    }
+
+    @Override
+    public boolean hasFeatures() {
+        // don't need to expand versions for this check
+        return defaults.hasFeatures();
+    }
+
+    @Override
     public String getLauncherName() {
         return defaults.getLauncherName();
     }
diff --git a/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ProductVersionExpansionRun.java b/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ProductVersionExpansionRun.java
new file mode 100644
index 0000000..93db658
--- /dev/null
+++ b/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/ProductVersionExpansionRun.java
@@ -0,0 +1,102 @@
+/*******************************************************************************
+ * Copyright (c) 2015 SAP SE and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    SAP SE - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.tycho.p2.tools.publisher;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.IVersionedId;
+import org.eclipse.equinox.p2.metadata.VersionedId;
+import org.eclipse.tycho.artifacts.DependencyResolutionException;
+import org.eclipse.tycho.artifacts.IllegalArtifactReferenceException;
+import org.eclipse.tycho.core.shared.MavenLogger;
+import org.eclipse.tycho.p2.target.P2TargetPlatform;
+
+class ProductVersionExpansionRun {
+
+    private final P2TargetPlatform targetPlatform;
+    private final File productFile;
+
+    StringBuilder errors = null;
+
+    ProductVersionExpansionRun(P2TargetPlatform targetPlatform, File productFile) {
+        this.targetPlatform = targetPlatform;
+        this.productFile = productFile;
+    }
+
+    public List<IVersionedId> resolveReferences(String elementName, String artifactType, List<IVersionedId> references) {
+        final List<IVersionedId> result = new ArrayList<IVersionedId>();
+        for (IVersionedId reference : references) {
+            IInstallableUnit resolvedUnit = resolveReferenceWithErrorHandling(elementName, artifactType, reference);
+            if (resolvedUnit != null) {
+                result.add(new VersionedId(reference.getId(), resolvedUnit.getVersion()));
+            }
+        }
+        return result;
+    }
+
+    public List<IInstallableUnit> resolveReferencesToIUs(String elementName, String artifactType,
+            List<IVersionedId> references) {
+        final List<IInstallableUnit> result = new ArrayList<IInstallableUnit>();
+        for (IVersionedId reference : references) {
+            IInstallableUnit resolvedUnit = resolveReferenceWithErrorHandling(elementName, artifactType, reference);
+            if (resolvedUnit != null) {
+                result.add(resolvedUnit);
+            }
+        }
+        return result;
+    }
+
+    private IInstallableUnit resolveReferenceWithErrorHandling(String elementName, String artifactType,
+            IVersionedId reference) {
+        try {
+            return targetPlatform.resolveUnit(artifactType, reference.getId(), reference.getVersion());
+
+        } catch (IllegalArtifactReferenceException e) {
+            errors = initReferenceResolutionError(errors);
+            errors.append("  Invalid <").append(elementName).append("> element with id=")
+                    .append(quote(reference.getId()));
+            if (reference.getVersion() != null) {
+                errors.append(" and version=").append(quote(reference.getVersion()));
+            }
+            errors.append(": ").append(e.getMessage()).append('\n');
+        } catch (DependencyResolutionException e) {
+            errors = initReferenceResolutionError(errors);
+            errors.append("  ").append(e.getMessage()).append('\n');
+        }
+        return null;
+    }
+
+    public void reportErrors(MavenLogger logger) {
+        if (errors != null) {
+            logger.error(errors.toString());
+            throw new DependencyResolutionException("Cannot resolve dependencies of product " + productFile.getName()
+                    + ". See log for details.");
+        }
+    }
+
+    private StringBuilder initReferenceResolutionError(StringBuilder errors) {
+        if (errors == null)
+            return new StringBuilder("Cannot resolve dependencies of product " + productFile.getName() + ":\n");
+        else
+            return errors;
+    }
+
+    private static String quote(Object nullableObject) {
+        if (nullableObject == null)
+            return null;
+        else
+            return "\"" + nullableObject + "\"";
+    }
+
+}
diff --git a/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolImpl.java b/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolImpl.java
index 810e633..a9a7a42 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolImpl.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.tools.impl/src/main/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolImpl.java
@@ -13,9 +13,9 @@ package org.eclipse.tycho.p2.tools.publisher;
 import static org.eclipse.tycho.p2.tools.publisher.DependencySeedUtil.createSeed;
 
 import java.io.File;
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.Set;
+import java.util.List;
 
 import org.eclipse.core.runtime.AssertionFailedException;
 import org.eclipse.core.runtime.Path;
@@ -28,11 +28,13 @@ import org.eclipse.equinox.p2.publisher.IPublisherAdvice;
 import org.eclipse.equinox.p2.publisher.eclipse.ProductAction;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepository;
+import org.eclipse.tycho.ArtifactKey;
 import org.eclipse.tycho.ArtifactType;
 import org.eclipse.tycho.core.resolver.shared.DependencySeed;
 import org.eclipse.tycho.core.shared.BuildFailureException;
 import org.eclipse.tycho.core.shared.Interpolator;
 import org.eclipse.tycho.core.shared.MavenLogger;
+import org.eclipse.tycho.p2.target.ArtifactTypeHelper;
 import org.eclipse.tycho.p2.target.P2TargetPlatform;
 import org.eclipse.tycho.p2.tools.publisher.facade.PublishProductTool;
 import org.eclipse.tycho.repository.publishing.PublishingRepository;
@@ -64,12 +66,12 @@ public class PublishProductToolImpl implements PublishProductTool {
     }
 
     @Override
-    public Collection<DependencySeed> publishProduct(File productFile, Set<String> rootFeatures, File launcherBinaries,
-            String flavor) throws IllegalArgumentException {
+    public List<DependencySeed> publishProduct(File productFile, File launcherBinaries, String flavor)
+            throws IllegalArgumentException {
 
         IProductDescriptor originalProduct = loadProductFile(productFile);
-        IProductDescriptor expandedProduct = new ExpandedProduct(originalProduct, buildQualifier, targetPlatform,
-                interpolator, logger, rootFeatures);
+        ExpandedProduct expandedProduct = new ExpandedProduct(originalProduct, buildQualifier, targetPlatform,
+                interpolator, logger);
 
         IPublisherAdvice[] advice = getProductSpecificAdviceFileAdvice(productFile, expandedProduct);
 
@@ -80,8 +82,10 @@ public class PublishProductToolImpl implements PublishProductTool {
         Collection<IInstallableUnit> allIUs = publisherRunner.executeAction(action, metadataRepository,
                 artifactRepository, advice);
 
-        return Collections.singletonList(createSeed(ArtifactType.TYPE_ECLIPSE_PRODUCT,
-                selectUnit(allIUs, expandedProduct.getId())));
+        List<DependencySeed> seeds = new ArrayList<DependencySeed>();
+        seeds.add(createSeed(ArtifactType.TYPE_ECLIPSE_PRODUCT, selectUnit(allIUs, expandedProduct.getId())));
+        addRootFeatures(expandedProduct, seeds);
+        return seeds;
     }
 
     /**
@@ -108,6 +112,22 @@ public class PublishProductToolImpl implements PublishProductTool {
         return p2infFilename;
     }
 
+    private static void addRootFeatures(ExpandedProduct product, List<DependencySeed> seeds) {
+        final String productId = product.getId();
+
+        // add root features as special dependency seed which are marked as "add-on" for the product
+        DependencySeed.Filter filter = new DependencySeed.Filter() {
+            @Override
+            public boolean isAddOnFor(String type, String id) {
+                return ArtifactType.TYPE_ECLIPSE_PRODUCT.equals(type) && productId.equals(id);
+            }
+        };
+        for (IInstallableUnit featureIU : product.getRootFeatures()) {
+            ArtifactKey featureArtifact = ArtifactTypeHelper.toTychoArtifact(featureIU);
+            seeds.add(new DependencySeed(featureArtifact.getType(), featureArtifact.getId(), featureIU, filter));
+        }
+    }
+
     private static IProductDescriptor loadProductFile(File productFile) throws IllegalArgumentException {
         try {
             return new ProductFile(productFile.getAbsolutePath());
diff --git a/tycho-bundles/org.eclipse.tycho.p2.tools.shared/src/main/java/org/eclipse/tycho/p2/tools/publisher/facade/PublishProductTool.java b/tycho-bundles/org.eclipse.tycho.p2.tools.shared/src/main/java/org/eclipse/tycho/p2/tools/publisher/facade/PublishProductTool.java
index 0d75a3b..5fc3754 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.tools.shared/src/main/java/org/eclipse/tycho/p2/tools/publisher/facade/PublishProductTool.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.tools.shared/src/main/java/org/eclipse/tycho/p2/tools/publisher/facade/PublishProductTool.java
@@ -11,8 +11,7 @@
 package org.eclipse.tycho.p2.tools.publisher.facade;
 
 import java.io.File;
-import java.util.Collection;
-import java.util.Set;
+import java.util.List;
 
 import org.eclipse.tycho.core.resolver.shared.DependencySeed;
 
@@ -23,14 +22,12 @@ public interface PublishProductTool {
      * 
      * @param productDefinition
      *            A .product file as defined by the Eclipse PDE
-     * @param rootFeatures
      * @param launcherBinaries
      *            A folder that contains the native Eclipse launcher binaries
      * @param flavor
      *            The installation flavor the product shall be published for
      * @return a handles to the published product IU
      */
-    Collection<DependencySeed> publishProduct(File productDefinition, Set<String> rootFeatures, File launcherBinaries,
-            String flavor);
+    List<DependencySeed> publishProduct(File productDefinition, File launcherBinaries, String flavor);
 
 }
diff --git a/tycho-bundles/org.eclipse.tycho.p2.tools.tests/resources/publishers/products/pluginProductWithLeftovers.product b/tycho-bundles/org.eclipse.tycho.p2.tools.tests/resources/publishers/products/pluginProductWithLeftovers.product
index 2350994..8d15c5e 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.tools.tests/resources/publishers/products/pluginProductWithLeftovers.product
+++ b/tycho-bundles/org.eclipse.tycho.p2.tools.tests/resources/publishers/products/pluginProductWithLeftovers.product
@@ -15,6 +15,7 @@
 
    <features>
       <feature id="feature.toBeIgnored" version="0.0.0"/>
+      <feature id="root.feature.toBeIgnored" version="0.0.0" installMode="root"/>
    </features>
 
 </product>
diff --git a/tycho-bundles/org.eclipse.tycho.p2.tools.tests/src/test/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolTest.java b/tycho-bundles/org.eclipse.tycho.p2.tools.tests/src/test/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolTest.java
index 79751df..f57d7be 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.tools.tests/src/test/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolTest.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.tools.tests/src/test/java/org/eclipse/tycho/p2/tools/publisher/PublishProductToolTest.java
@@ -10,9 +10,9 @@
  *******************************************************************************/
 package org.eclipse.tycho.p2.tools.publisher;
 
-import static java.util.Arrays.asList;
 import static org.eclipse.tycho.p2.testutil.InstallableUnitMatchers.configureTouchpointInstructionThat;
 import static org.eclipse.tycho.p2.testutil.InstallableUnitMatchers.hasSelfCapability;
+import static org.eclipse.tycho.p2.testutil.InstallableUnitMatchers.productUnit;
 import static org.eclipse.tycho.p2.testutil.InstallableUnitMatchers.requirement;
 import static org.eclipse.tycho.p2.testutil.InstallableUnitMatchers.strictRequirement;
 import static org.eclipse.tycho.p2.testutil.InstallableUnitMatchers.unitWithId;
@@ -20,6 +20,7 @@ import static org.eclipse.tycho.p2.testutil.InstallableUnitUtil.createBundleIU;
 import static org.eclipse.tycho.p2.testutil.InstallableUnitUtil.createFeatureIU;
 import static org.eclipse.tycho.p2.testutil.MatchingItemFinder.getUnique;
 import static org.eclipse.tycho.p2.tools.test.util.ResourceUtil.resourceFile;
+import static org.eclipse.tycho.test.util.TychoMatchers.hasSize;
 import static org.eclipse.tycho.test.util.TychoMatchers.isFile;
 import static org.hamcrest.CoreMatchers.both;
 import static org.hamcrest.CoreMatchers.containsString;
@@ -72,7 +73,6 @@ public class PublishProductToolTest {
     private static final String FLAVOR = "tooling";
     private static final List<TargetEnvironment> ENVIRONMENTS = Collections.singletonList(new TargetEnvironment(
             "testos", "testws", "testarch"));
-    private static final Set<String> ROOTS = Collections.emptySet();
 
     @Rule
     public ExpectedException exceptions = ExpectedException.none();
@@ -124,7 +124,7 @@ public class PublishProductToolTest {
         File launcherBinaries = resourceFile("launchers/");
 
         subject = initPublisher();
-        Collection<DependencySeed> seeds = subject.publishProduct(productDefinition, ROOTS, launcherBinaries, FLAVOR);
+        Collection<DependencySeed> seeds = subject.publishProduct(productDefinition, launcherBinaries, FLAVOR);
 
         assertThat(seeds.size(), is(1));
         DependencySeed seed = seeds.iterator().next();
@@ -146,7 +146,7 @@ public class PublishProductToolTest {
         File productDefinition = resourceFile("publishers/products/test.product");
         subject = initPublisher();
 
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         assertThat(unit.getVersion().toString(), is("0.1.0." + QUALIFIER));
     }
@@ -158,7 +158,7 @@ public class PublishProductToolTest {
                 createBundleIU("test.plugin", "1.1.0"), createFeatureIU("test.feature", "0.2.0.20141230"),
                 createFeatureIU("test.feature", "1.2.0"));
 
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         assertThat(unit.getRequirements(), hasItem(strictRequirement("test.plugin", "1.1.0")));
         assertThat(unit.getRequirements(), hasItem(strictRequirement("test.feature.feature.group", "1.2.0")));
@@ -171,7 +171,7 @@ public class PublishProductToolTest {
                 createBundleIU("test.plugin", "1.1.0"), createFeatureIU("test.feature", "0.2.0.20141230"),
                 createFeatureIU("test.feature", "1.2.0"));
 
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         assertThat(unit.getRequirements(), hasItem(strictRequirement("test.plugin", "0.1.0.20141230")));
         assertThat(unit.getRequirements(), hasItem(strictRequirement("test.feature.feature.group", "0.2.0.20141230")));
@@ -185,7 +185,7 @@ public class PublishProductToolTest {
         exceptions.expect(BuildFailureException.class);
         exceptions.expectMessage(both(containsString("inclusionsWithVersionSyntaxError.product")).and(
                 containsString("nonOSGi"))); // "nonOSGi" is the malformed version string
-        subject.publishProduct(productDefinition, ROOTS, null, FLAVOR);
+        subject.publishProduct(productDefinition, null, FLAVOR);
     }
 
     @Test
@@ -196,7 +196,7 @@ public class PublishProductToolTest {
         logVerifier.expectError(containsString("test.feature1"));
         logVerifier.expectError(containsString("test.feature2"));
         thrownException.expect(DependencyResolutionException.class);
-        subject.publishProduct(productDefinition, ROOTS, null, FLAVOR);
+        subject.publishProduct(productDefinition, null, FLAVOR);
     }
 
     @Test
@@ -205,7 +205,7 @@ public class PublishProductToolTest {
         File productDefinition = resourceFile("publishers/products/featureProductWithLeftovers.product");
         subject = initPublisher(createFeatureIU("org.eclipse.rcp", "3.3.101.R34x_v20081125"));
 
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         assertThat(unit.getRequirements(),
                 hasItem(strictRequirement("org.eclipse.rcp.feature.group", "3.3.101.R34x_v20081125")));
@@ -216,7 +216,7 @@ public class PublishProductToolTest {
         File productDefinition = resourceFile("publishers/products/pluginProductWithLeftovers.product");
         subject = initPublisher(createBundleIU("org.eclipse.core.runtime", "3.5.0.v20090525"));
 
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         assertThat(unit.getRequirements(), hasItem(strictRequirement("org.eclipse.core.runtime", "3.5.0.v20090525")));
     }
@@ -230,7 +230,7 @@ public class PublishProductToolTest {
 
         logVerifier.expectError(containsString("org.eclipse.core.filesystem.hpux.ppc"));
         thrownException.expect(DependencyResolutionException.class);
-        subject.publishProduct(productDefinition, ROOTS, launcherBinaries, FLAVOR);
+        subject.publishProduct(productDefinition, launcherBinaries, FLAVOR);
     }
 
     @Test
@@ -238,7 +238,7 @@ public class PublishProductToolTest {
         File productDefinition = resourceFile("publishers/products/p2Inf/test.product");
         subject = initPublisher();
 
-        subject.publishProduct(productDefinition, ROOTS, null, FLAVOR);
+        subject.publishProduct(productDefinition, null, FLAVOR);
 
         assertThat(unitsIn(outputRepository), hasItem(unitWithId("testproduct")));
         IInstallableUnit unit = getUnique(unitWithId("testproduct"), unitsIn(outputRepository));
@@ -255,7 +255,7 @@ public class PublishProductToolTest {
         File productDefinition = resourceFile("publishers/products/p2InfPerProduct/test.product");
         subject = initPublisher();
 
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         assertThat(unit.getRequirements(), hasItem(strictRequirement("extra.iu", "1.2.3." + QUALIFIER)));
     }
@@ -266,7 +266,7 @@ public class PublishProductToolTest {
         subject = initPublisher(createBundleIU("org.eclipse.osgi", "3.10.1.v20140909-1633"));
         when(interpolatorMock.interpolate("${unqualifiedVersion}.${buildQualifier}")).thenReturn("1.0.0.20150109");
 
-        IInstallableUnit mainUnit = getUnit(subject.publishProduct(productDefinition, ROOTS, null, FLAVOR));
+        IInstallableUnit mainUnit = getUnit(subject.publishProduct(productDefinition, null, FLAVOR));
 
         String configUnitId = "tooling" + mainUnit.getId() + ".config.testws.testos.testarch";
         IInstallableUnit configUnit = getUnique(unitWithId(configUnitId), unitsIn(outputRepository));
@@ -282,24 +282,41 @@ public class PublishProductToolTest {
                 createFeatureIU("org.eclipse.e4.rcp", "1.0"), createFeatureIU("org.eclipse.help", "2.0.102.v20140128"),
                 createFeatureIU("org.eclipse.egit", "2.0"));
 
-        // TODO 428889 this information shall come from the IProductDescriptor
-        Set<String> rootFeatures = new HashSet<String>(asList("org.eclipse.help", "org.eclipse.egit"));
-        IInstallableUnit unit = getUnit(subject.publishProduct(productDefinition, rootFeatures, null, FLAVOR));
+        List<DependencySeed> seeds = subject.publishProduct(productDefinition, null, FLAVOR);
+        IInstallableUnit productUnit = getUnique(productUnit(), unitsIn(seeds));
 
-        assertThat(unit.getRequirements(), hasItem(requirement("org.eclipse.rcp.feature.group", "4.4.0.v20140128")));
-        assertThat(unit.getRequirements(), hasItem(requirement("org.eclipse.e4.rcp.feature.group", "1.0")));
-        assertThat(unit.getRequirements(),
+        assertThat(productUnit.getRequirements(),
+                hasItem(requirement("org.eclipse.rcp.feature.group", "4.4.0.v20140128")));
+        assertThat(productUnit.getRequirements(), hasItem(requirement("org.eclipse.e4.rcp.feature.group", "1.0")));
+        assertThat(productUnit.getRequirements(),
                 not(hasItem(requirement("org.eclipse.help.feature.group", "2.0.102.v20140128"))));
-        assertThat(unit.getRequirements(), not(hasItem(requirement("org.eclipse.egit.feature.group", "2.0"))));
-
-        // TODO 428889 extract root feature seeds on this class loader side
+        assertThat(productUnit.getRequirements(), not(hasItem(requirement("org.eclipse.egit.feature.group", "2.0"))));
+
+        assertThat(seeds.get(1).getId(), is("org.eclipse.help"));
+        assertThat((IInstallableUnit) seeds.get(1).getInstallableUnit(),
+                is(unitWithId("org.eclipse.help.feature.group")));
+        assertThat(seeds.get(2).getId(), is("org.eclipse.egit"));
+        assertThat((IInstallableUnit) seeds.get(2).getInstallableUnit(),
+                is(unitWithId("org.eclipse.egit.feature.group")));
+        assertThat(seeds, hasSize(3));
     }
 
+    /**
+     * Returns the IU from the only dependency seed.
+     */
     private static IInstallableUnit getUnit(Collection<DependencySeed> seeds) {
         assertThat(seeds, TychoMatchers.hasSize(1));
         return (IInstallableUnit) seeds.iterator().next().getInstallableUnit();
     }
 
+    private Set<IInstallableUnit> unitsIn(Collection<DependencySeed> seeds) {
+        Set<IInstallableUnit> result = new HashSet<IInstallableUnit>();
+        for (DependencySeed seed : seeds) {
+            result.add((IInstallableUnit) seed.getInstallableUnit());
+        }
+        return result;
+    }
+
     private static Set<IInstallableUnit> unitsIn(PublishingRepository results) {
         return results.getMetadataRepository().query(QueryUtil.ALL_UNITS, null).toUnmodifiableSet();
     }
diff --git a/tycho-bundles/org.eclipse.tycho.test.utils/src/main/java/org/eclipse/tycho/p2/testutil/InstallableUnitMatchers.java b/tycho-bundles/org.eclipse.tycho.test.utils/src/main/java/org/eclipse/tycho/p2/testutil/InstallableUnitMatchers.java
index 3f8f8d5..2114ae4 100644
--- a/tycho-bundles/org.eclipse.tycho.test.utils/src/main/java/org/eclipse/tycho/p2/testutil/InstallableUnitMatchers.java
+++ b/tycho-bundles/org.eclipse.tycho.test.utils/src/main/java/org/eclipse/tycho/p2/testutil/InstallableUnitMatchers.java
@@ -11,6 +11,7 @@
 package org.eclipse.tycho.p2.testutil;
 
 import static org.eclipse.tycho.p2.testutil.InstallableUnitUtil.IU_CAPABILITY_NS;
+import static org.eclipse.tycho.p2.testutil.InstallableUnitUtil.PRODUCT_TYPE_PROPERTY;
 
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IProvidedCapability;
@@ -62,6 +63,21 @@ public class InstallableUnitMatchers {
         return unit(versionedId.getId(), versionedId.getVersion().toString());
     }
 
+    public static Matcher<IInstallableUnit> productUnit() {
+        return new TypeSafeMatcher<IInstallableUnit>() {
+
+            @Override
+            public void describeTo(Description description) {
+                description.appendText("a product installable unit");
+            }
+
+            @Override
+            protected boolean matchesSafely(IInstallableUnit item) {
+                return Boolean.valueOf(item.getProperty(PRODUCT_TYPE_PROPERTY));
+            }
+        };
+    }
+
     public static Matcher<IInstallableUnit> hasGAV(String groupId, String artifactId, String version) {
         return hasGAV(groupId, artifactId, version, null);
     }
diff --git a/tycho-bundles/tycho-bundles-target/tycho-bundles-target.target b/tycho-bundles/tycho-bundles-target/tycho-bundles-target.target
index f071b52..2f084d4 100644
--- a/tycho-bundles/tycho-bundles-target/tycho-bundles-target.target
+++ b/tycho-bundles/tycho-bundles-target/tycho-bundles-target.target
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<?pde version="3.8"?><target name="Target platform for Tycho's bundles" sequenceNumber="23">
+<?pde version="3.8"?><target name="Target platform for Tycho's bundles" sequenceNumber="24">
 <locations>
 <location includeAllPlatforms="false" includeConfigurePhase="false" includeMode="slicer" includeSource="true" type="InstallableUnit">
 <unit id="org.eclipse.equinox.executable.feature.group" version="0.0.0"/>
@@ -12,7 +12,8 @@
 <unit id="org.eclipse.ecf.filetransfer.ssl.feature.feature.group" version="0.0.0"/>
 <unit id="org.eclipse.ecf.filetransfer.httpclient4.feature.feature.group" version="0.0.0"/>
 <unit id="org.eclipse.ecf.filetransfer.httpclient4.ssl.feature.feature.group" version="0.0.0"/>
-<repository location="http://download.eclipse.org/eclipse/updates/4.5milestones/S-4.5M4-201412102000"/>
+<!-- this is a build towards Mars M6; TODO use milestone -->
+<repository location="http://download.eclipse.org/eclipse/updates/4.5-N-builds/N20150216-2000"/>
 </location>
 <location includeAllPlatforms="false" includeConfigurePhase="false" includeMode="slicer" includeSource="true" type="InstallableUnit">
 <unit id="org.mockito" version="1.8.4.v201303031500"/>
diff --git a/tycho-p2/tycho-p2-publisher-plugin/src/main/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojo.java b/tycho-p2/tycho-p2-publisher-plugin/src/main/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojo.java
index c181e3f..20a73b4 100644
--- a/tycho-p2/tycho-p2-publisher-plugin/src/main/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojo.java
+++ b/tycho-p2/tycho-p2-publisher-plugin/src/main/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojo.java
@@ -16,9 +16,7 @@ import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
@@ -37,7 +35,6 @@ import org.eclipse.tycho.core.shared.Interpolator;
 import org.eclipse.tycho.core.utils.TychoProjectUtils;
 import org.eclipse.tycho.locking.facade.FileLockService;
 import org.eclipse.tycho.locking.facade.FileLocker;
-import org.eclipse.tycho.model.FeatureRef;
 import org.eclipse.tycho.model.ProductConfiguration;
 import org.eclipse.tycho.p2.tools.publisher.facade.PublishProductTool;
 import org.eclipse.tycho.p2.tools.publisher.facade.PublisherServiceFactory;
@@ -91,8 +88,7 @@ public final class PublishProductMojo extends AbstractPublishMojo {
                             + " does not contain the mandatory attribute 'version'");
                 }
 
-                Set<String> rootFeatures = extractRootFeatures(productConfiguration, seeds);
-                seeds.addAll(publisher.publishProduct(productFile, rootFeatures,
+                seeds.addAll(publisher.publishProduct(productFile,
                         productConfiguration.includeLaunchers() ? getExpandedLauncherBinaries() : null, flavor));
             } catch (IOException e) {
                 throw new MojoExecutionException(
@@ -102,27 +98,6 @@ public final class PublishProductMojo extends AbstractPublishMojo {
         return seeds;
     }
 
-    static Set<String> extractRootFeatures(ProductConfiguration product, List<DependencySeed> seeds) {
-        final String productId = product.getId();
-        Set<String> rootFeatures = new HashSet<String>();
-
-        // add root features as special dependency seed which are marked as "add-on" for the product
-        DependencySeed.Filter filter = new DependencySeed.Filter() {
-            @Override
-            public boolean isAddOnFor(String type, String id) {
-                return ArtifactType.TYPE_ECLIPSE_PRODUCT.equals(type) && productId.equals(id);
-            }
-        };
-        for (FeatureRef feature : product.getFeatures()) {
-            if (feature.getInstallMode() == FeatureRef.InstallMode.root) {
-                // TODO 372780 get feature version from target platform that matches the specification; picking any version will no longer work once the the director installs from the target platform instead of from the resolved dependencies
-                seeds.add(new DependencySeed(ArtifactType.TYPE_ECLIPSE_FEATURE, feature.getId(), null, filter));
-                rootFeatures.add(feature.getId());
-            }
-        }
-        return rootFeatures;
-    }
-
     private File getExpandedLauncherBinaries() throws MojoExecutionException, MojoFailureException {
         // TODO 364134 take the executable feature from the target platform instead
         DependencyArtifacts dependencyArtifacts = TychoProjectUtils.getDependencyArtifacts(getProject());
diff --git a/tycho-p2/tycho-p2-publisher-plugin/src/test/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojoUnitTest.java b/tycho-p2/tycho-p2-publisher-plugin/src/test/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojoUnitTest.java
deleted file mode 100644
index 54a8db5..0000000
--- a/tycho-p2/tycho-p2-publisher-plugin/src/test/java/org/eclipse/tycho/plugins/p2/publisher/PublishProductMojoUnitTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010, 2014 SAP SE and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     SAP SE - initial API and implementation
- *******************************************************************************/
-package org.eclipse.tycho.plugins.p2.publisher;
-
-import static org.hamcrest.CoreMatchers.hasItem;
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.not;
-import static org.junit.Assert.assertThat;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-
-import org.eclipse.tycho.core.resolver.shared.DependencySeed;
-import org.eclipse.tycho.model.ProductConfiguration;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
-
-public class PublishProductMojoUnitTest {
-
-    @Rule
-    public final TemporaryFolder tempFolder = new TemporaryFolder();
-
-    private final File testResources = new File("src/test/resources/unitTestResources");
-
-    @Test
-    public void testExtractRootFeatures() throws Exception {
-        ProductConfiguration product = ProductConfiguration.read(new File(testResources, "rootFeatures.product"));
-        List<DependencySeed> seeds = new ArrayList<DependencySeed>();
-
-        Set<String> rootFeatures = PublishProductMojo.extractRootFeatures(product, seeds);
-
-        // workaround for 428889: remove from root features so that p2 doesn't include them in the product IU
-        assertThat(rootFeatures, not(hasItem("org.eclipse.rcp")));
-        assertThat(rootFeatures, hasItem("org.eclipse.help"));
-        assertThat(rootFeatures, hasItem("org.eclipse.egit"));
-
-        assertThat(seeds.size(), not(is(0)));
-        assertThat(seeds.get(0).getId(), is("org.eclipse.help"));
-        assertThat(seeds.get(1).getId(), is("org.eclipse.egit"));
-        assertThat(seeds.size(), is(2));
-    }
-
-}
diff --git a/tycho-p2/tycho-p2-publisher-plugin/src/test/resources/unitTestResources/rootFeatures.product b/tycho-p2/tycho-p2-publisher-plugin/src/test/resources/unitTestResources/rootFeatures.product
deleted file mode 100644
index 9bb6a22..0000000
--- a/tycho-p2/tycho-p2-publisher-plugin/src/test/resources/unitTestResources/rootFeatures.product
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?pde version="3.5"?>
-
-<product uid="product.with.root.features" useFeatures="true" includeLaunchers="true">
-
-   <configIni use="default">
-   </configIni>
-
-   <launcherArgs>
-      <vmArgsMac>-XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts</vmArgsMac>
-   </launcherArgs>
-
-   <plugins>
-   </plugins>
-
-   <features>
-      <feature id="org.eclipse.rcp" version="4.4.0.v20140128" installMode="include"/>
-      <feature id="org.eclipse.e4.rcp"/>  <!-- "include" is the default -->
-      <feature id="org.eclipse.help" version="2.0.102.v20140128" installMode="root"/>
-      <feature id="org.eclipse.egit" installMode="root"/>
-   </features>
-
-</product>
diff --git a/tycho-packaging-plugin/src/main/java/org/eclipse/tycho/packaging/FeatureXmlTransformer.java b/tycho-packaging-plugin/src/main/java/org/eclipse/tycho/packaging/FeatureXmlTransformer.java
index 0d0cf65..0400632 100644
--- a/tycho-packaging-plugin/src/main/java/org/eclipse/tycho/packaging/FeatureXmlTransformer.java
+++ b/tycho-packaging-plugin/src/main/java/org/eclipse/tycho/packaging/FeatureXmlTransformer.java
@@ -75,7 +75,7 @@ public class FeatureXmlTransformer {
     private ArtifactKey resolvePluginReference(TargetPlatform targetPlatform, PluginRef pluginRef)
             throws MojoFailureException {
         try {
-            return targetPlatform.resolveReference(ArtifactType.TYPE_ECLIPSE_PLUGIN, pluginRef.getId(),
+            return targetPlatform.resolveArtifact(ArtifactType.TYPE_ECLIPSE_PLUGIN, pluginRef.getId(),
                     pluginRef.getVersion());
         } catch (IllegalArtifactReferenceException e) {
             throw new MojoFailureException("Invalid plugin reference with id=" + quote(pluginRef.getId())
@@ -86,7 +86,7 @@ public class FeatureXmlTransformer {
     private ArtifactKey resolveFeatureReference(TargetPlatform targetPlatform, FeatureRef featureRef)
             throws MojoFailureException {
         try {
-            return targetPlatform.resolveReference(ArtifactType.TYPE_ECLIPSE_FEATURE, featureRef.getId(),
+            return targetPlatform.resolveArtifact(ArtifactType.TYPE_ECLIPSE_FEATURE, featureRef.getId(),
                     featureRef.getVersion());
         } catch (IllegalArtifactReferenceException e) {
             throw new MojoFailureException("Invalid feature reference with id=" + quote(featureRef.getId())
diff --git a/tycho-packaging-plugin/src/test/java/org/eclipse/tycho/packaging/FeatureXmlTransformerTest.java b/tycho-packaging-plugin/src/test/java/org/eclipse/tycho/packaging/FeatureXmlTransformerTest.java
index b577273..e8171c1 100644
--- a/tycho-packaging-plugin/src/test/java/org/eclipse/tycho/packaging/FeatureXmlTransformerTest.java
+++ b/tycho-packaging-plugin/src/test/java/org/eclipse/tycho/packaging/FeatureXmlTransformerTest.java
@@ -55,8 +55,8 @@ public class FeatureXmlTransformerTest {
                 "feature.xml"));
 
         TargetPlatform tp = mock(TargetPlatform.class);
-        when(tp.resolveReference("eclipse-feature", "org.eclipse.rcp", "4.5.0.qualifier")).thenReturn(rcpFeatureInTP);
-        when(tp.resolveReference("eclipse-plugin", "org.junit4", "4.8.1.qualifier")).thenReturn(junit4InTP);
+        when(tp.resolveArtifact("eclipse-feature", "org.eclipse.rcp", "4.5.0.qualifier")).thenReturn(rcpFeatureInTP);
+        when(tp.resolveArtifact("eclipse-plugin", "org.junit4", "4.8.1.qualifier")).thenReturn(junit4InTP);
         when(tp.getArtifactLocation(junit4InTP)).thenReturn(junit4JarLocation);
 
         subject.expandReferences(feature, tp);
-- 
1.9.1

