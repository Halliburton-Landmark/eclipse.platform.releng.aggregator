From 15015796aa64d17293ff25b050146cd71df9aa46 Mon Sep 17 00:00:00 2001
From: Pascal Rapicault <pascal@rapicorp.com>
Date: Fri, 6 Mar 2015 18:11:37 -0500
Subject: [PATCH 4/4] Revert "453446 Disable fixSWT workaround for SWT >= 3.104
 (Mars)"

This reverts commit 2ab08b7a0079f277f52eacab3a9a4bbd0b112564.
---
 .../p2base/metadata/QueryableCollection.java       |  3 -
 .../ProjectorResolutionStrategyTest.java           | 75 +++++++++++-----------
 .../resolution/ProjectorResolutionStrategy.java    | 33 ++++------
 .../p2/util/resolution/ResolverDebugUtils.java     |  1 +
 4 files changed, 50 insertions(+), 62 deletions(-)

diff --git a/tycho-bundles/org.eclipse.tycho.p2.maven.repository/src/main/java/org/eclipse/tycho/repository/p2base/metadata/QueryableCollection.java b/tycho-bundles/org.eclipse.tycho.p2.maven.repository/src/main/java/org/eclipse/tycho/repository/p2base/metadata/QueryableCollection.java
index 7605742..02a2b71 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.maven.repository/src/main/java/org/eclipse/tycho/repository/p2base/metadata/QueryableCollection.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.maven.repository/src/main/java/org/eclipse/tycho/repository/p2base/metadata/QueryableCollection.java
@@ -37,12 +37,10 @@ public class QueryableCollection extends IndexProvider<IInstallableUnit> {
         dataSet = new ArrayList<IInstallableUnit>(ius);
     }
 
-    @Override
     public Iterator<IInstallableUnit> everything() {
         return dataSet.iterator();
     }
 
-    @Override
     public synchronized IIndex<IInstallableUnit> getIndex(String memberName) {
         if (InstallableUnit.MEMBER_PROVIDED_CAPABILITIES.equals(memberName)) {
             if (capabilityIndex == null)
@@ -57,7 +55,6 @@ public class QueryableCollection extends IndexProvider<IInstallableUnit> {
         return null;
     }
 
-    @Override
     public synchronized Object getManagedProperty(Object client, String memberName, Object key) {
         if (!(client instanceof IInstallableUnit))
             return null;
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategyTest.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategyTest.java
index d1e12a6..f01eb60 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategyTest.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl.test/src/test/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategyTest.java
@@ -13,7 +13,6 @@ package org.eclipse.tycho.p2.util.resolution;
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.hasItem;
-import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
@@ -31,6 +30,9 @@ import org.eclipse.equinox.internal.p2.metadata.ProvidedCapability;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IProvidedCapability;
 import org.eclipse.equinox.p2.metadata.Version;
+import org.eclipse.equinox.p2.query.IQuery;
+import org.eclipse.equinox.p2.query.IQueryResult;
+import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.tycho.p2.target.ExecutionEnvironmentTestUtils;
 import org.eclipse.tycho.p2.testutil.InstallableUnitUtil;
 import org.eclipse.tycho.test.util.LogVerifier;
@@ -41,82 +43,69 @@ import org.junit.Test;
 @SuppressWarnings("restriction")
 public class ProjectorResolutionStrategyTest {
 
+    private static final class CollectionQueryable implements IQueryable<IInstallableUnit> {
+
+        private final Collection<IInstallableUnit> ius;
+
+        private CollectionQueryable(Collection<IInstallableUnit> ius) {
+            this.ius = ius;
+        }
+
+        public IQueryResult<IInstallableUnit> query(IQuery<IInstallableUnit> query, IProgressMonitor monitor) {
+            return query.perform(ius.iterator());
+        }
+    }
+
     @Rule
     public final LogVerifier logVerifier = new LogVerifier();
-    private IProgressMonitor monitor = new NullProgressMonitor();
 
     private ProjectorResolutionStrategy strategy;
     private ResolutionDataImpl data = new ResolutionDataImpl(ExecutionEnvironmentTestUtils.NOOP_EE_RESOLUTION_HINTS);
 
-    private List<IInstallableUnit> selectedIUs;
-
     @Before
     public void setup() {
         strategy = new ProjectorResolutionStrategy(logVerifier.getLogger());
         strategy.setData(data);
         data.setRootIUs(Collections.<IInstallableUnit> emptyList());
-
-        selectedIUs = new ArrayList<IInstallableUnit>();
-    }
-
-    @Test
-    public void testFixSwt() throws Exception {
-        selectedIUs.add(InstallableUnitUtil.createIU("org.eclipse.swt", "3.103.1.v20140903-1938")); // a Luna version
-        IInstallableUnit swtImplFragment = createSwtFragment("linux", "gtk", "x86_64", null);
-        final List<IInstallableUnit> availableIUs = new ArrayList<IInstallableUnit>();
-        availableIUs.addAll(selectedIUs);
-        availableIUs.add(swtImplFragment);
-        strategy.fixSWT(availableIUs, selectedIUs, createSelectionContext("linux", "gtk", "x86_64"), monitor);
-        assertThat(selectedIUs.size(), is(2));
-        assertThat(selectedIUs, hasItem(swtImplFragment));
-    }
-
-    @Test
-    public void testFixSwtDisabledForNonBrokenSWTVersion() throws Exception {
-        selectedIUs.add(InstallableUnitUtil.createIU("org.eclipse.swt", "3.104.0.v20141125-0639")); // SWT bug 361901 is fixed since Mars
-        IInstallableUnit swtImplFragment = createSwtFragment("linux", "gtk", "x86_64", null);
-        final List<IInstallableUnit> availableIUs = new ArrayList<IInstallableUnit>();
-        availableIUs.addAll(selectedIUs);
-        availableIUs.add(swtImplFragment);
-        // this is a synthetic setup to test that fixSWT doesn't do anything -> it doesn't need to do anything because the selectedIUs would already contain the right fragment
-        strategy.fixSWT(availableIUs, selectedIUs, createSelectionContext("linux", "gtk", "x86_64"), monitor);
-        assertThat(selectedIUs.size(), is(1));
-        assertThat(selectedIUs, not(hasItem(swtImplFragment)));
     }
 
     @Test
     public void testFixSwtWithNLSFragmentPresent() throws Exception {
-        selectedIUs.add(InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0"));
+        final List<IInstallableUnit> selectedIUs = createSwtHostBundleIUList();
         IInstallableUnit swtImplFragment = createSwtFragment("linux", "gtk", "x86_64", null);
         IInstallableUnit swtNLSFragment = createSwtFragment("linux", "gtk", "x86_64", "de");
         final List<IInstallableUnit> availableIUs = new ArrayList<IInstallableUnit>();
         availableIUs.addAll(selectedIUs);
         availableIUs.add(swtNLSFragment);
         availableIUs.add(swtImplFragment);
-        strategy.fixSWT(availableIUs, selectedIUs, createSelectionContext("linux", "gtk", "x86_64"), monitor);
+        strategy.fixSWT(new CollectionQueryable(availableIUs), selectedIUs,
+                createSelectionContext("linux", "gtk", "x86_64"), new NullProgressMonitor());
         assertThat(selectedIUs.size(), is(2));
         assertThat(selectedIUs, hasItem(swtImplFragment));
     }
 
     @Test
     public void testFixSwtNoSwtDependency() throws Exception {
+        final List<IInstallableUnit> selectedIUs = new ArrayList<IInstallableUnit>();
         IInstallableUnit swtImplFragment = createSwtFragment("linux", "gtk", "x86_64", null);
         final List<IInstallableUnit> availableIUs = new ArrayList<IInstallableUnit>();
         availableIUs.add(swtImplFragment);
-        strategy.fixSWT(availableIUs, selectedIUs, createSelectionContext("linux", "gtk", "x86_64"), monitor);
+        strategy.fixSWT(new CollectionQueryable(availableIUs), selectedIUs,
+                createSelectionContext("linux", "gtk", "x86_64"), new NullProgressMonitor());
         assertThat(selectedIUs.size(), is(0));
     }
 
     @Test
     public void testFixSwtNoImplFound() throws Exception {
-        selectedIUs.add(InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0"));
+        final List<IInstallableUnit> selectedIUs = createSwtHostBundleIUList();
         // fragment does not match selection context
         IInstallableUnit swtImplFragmentWindows = createSwtFragment("win32", "win32", "x86_64", null);
         final List<IInstallableUnit> availableIUs = new ArrayList<IInstallableUnit>();
         availableIUs.addAll(selectedIUs);
         availableIUs.add(swtImplFragmentWindows);
         try {
-            strategy.fixSWT(availableIUs, selectedIUs, createSelectionContext("linux", "gtk", "x86_64"), monitor);
+            strategy.fixSWT(new CollectionQueryable(availableIUs), selectedIUs,
+                    createSelectionContext("linux", "gtk", "x86_64"), new NullProgressMonitor());
             fail();
         } catch (RuntimeException e) {
             // expected
@@ -128,7 +117,7 @@ public class ProjectorResolutionStrategyTest {
     @Test
     public void testFixSwtSwtInRootIUs() throws Exception {
         IInstallableUnit rootIU = InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0");
-        selectedIUs.add(InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0"));
+        final List<IInstallableUnit> selectedIUs = createSwtHostBundleIUList();
         invokefixSwtWithLinuxFragmentPresent(rootIU, selectedIUs);
         assertThat(selectedIUs.size(), is(1));
         assertThat(selectedIUs, hasItem(InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0")));
@@ -137,7 +126,7 @@ public class ProjectorResolutionStrategyTest {
     @Test
     public void testFixSwtSwtFragmentInRootIUs() throws Exception {
         IInstallableUnit rootIU = createSwtFragment("linux", "gtk", "x86_64", null);
-        selectedIUs.add(InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0"));
+        final List<IInstallableUnit> selectedIUs = createSwtHostBundleIUList();
         invokefixSwtWithLinuxFragmentPresent(rootIU, selectedIUs);
         assertThat(selectedIUs.size(), is(1));
         assertThat(selectedIUs, hasItem(InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0")));
@@ -149,7 +138,15 @@ public class ProjectorResolutionStrategyTest {
         IInstallableUnit swtImplFragment = createSwtFragment("linux", "gtk", "x86_64", null);
         availableIUs.addAll(selectedIUs);
         availableIUs.add(swtImplFragment);
-        strategy.fixSWT(availableIUs, selectedIUs, createSelectionContext("linux", "gtk", "x86_64"), monitor);
+        strategy.fixSWT(new CollectionQueryable(availableIUs), selectedIUs,
+                createSelectionContext("linux", "gtk", "x86_64"), new NullProgressMonitor());
+    }
+
+    private List<IInstallableUnit> createSwtHostBundleIUList() {
+        final List<IInstallableUnit> ius = new ArrayList<IInstallableUnit>();
+        IInstallableUnit swtHost = InstallableUnitUtil.createIU("org.eclipse.swt", "1.0.0");
+        ius.add(swtHost);
+        return ius;
     }
 
     private IInstallableUnit createSwtFragment(String os, String ws, String arch, String nls) {
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategy.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategy.java
index 8df6fae..10fca6b 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategy.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ProjectorResolutionStrategy.java
@@ -32,7 +32,6 @@ import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IProvidedCapability;
 import org.eclipse.equinox.p2.metadata.IRequirement;
-import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.metadata.expression.IMatchExpression;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.query.QueryUtil;
@@ -93,7 +92,7 @@ public class ProjectorResolutionStrategy extends AbstractSlicerResolutionStrateg
         // remove fake IUs from resolved state
         newState.removeAll(data.getEEResolutionHints().getTemporaryAdditions());
 
-        fixSWT(data.getAvailableIUs(), newState, newSelectionContext, monitor);
+        fixSWT(new QueryableCollection(data.getAvailableIUs()), newState, newSelectionContext, monitor);
 
         if (logger.isExtendedDebugEnabled()) {
             logger.debug("Resolved IUs:\n" + ResolverDebugUtils.toDebugString(newState, false));
@@ -117,14 +116,17 @@ public class ProjectorResolutionStrategy extends AbstractSlicerResolutionStrateg
      * There is no dependency from the host to the fragments, so we need to add the matching SWT
      * fragment manually.
      */
-    void fixSWT(Collection<IInstallableUnit> availableIUs, Collection<IInstallableUnit> resolutionResult,
+    void fixSWT(IQueryable<IInstallableUnit> availableIUs, Collection<IInstallableUnit> ius,
             Map<String, String> newSelectionContext, IProgressMonitor monitor) {
-        IInstallableUnit swtHost = findSWTHostIU(resolutionResult);
+        boolean swt = false;
+        for (IInstallableUnit iu : ius) {
+            if ("org.eclipse.swt".equals(iu.getId())) {
+                swt = true;
+                break;
+            }
+        }
 
-        if (swtHost == null) {
-            return;
-        } else if (swtHost.getVersion().compareTo(Version.createOSGi(3, 104, 0)) >= 0) {
-            // bug 361901 was fixed in Mars
+        if (!swt) {
             return;
         }
 
@@ -142,8 +144,8 @@ public class ProjectorResolutionStrategy extends AbstractSlicerResolutionStrateg
 
         IInstallableUnit swtFragment = null;
 
-        all_ius: for (Iterator<IInstallableUnit> iter = new QueryableCollection(availableIUs).query(
-                QueryUtil.ALL_UNITS, monitor).iterator(); iter.hasNext();) {
+        all_ius: for (Iterator<IInstallableUnit> iter = availableIUs.query(QueryUtil.ALL_UNITS, monitor).iterator(); iter
+                .hasNext();) {
             IInstallableUnit iu = iter.next();
             if (iu.getId().startsWith("org.eclipse.swt") && isApplicable(newSelectionContext, iu.getFilter())
                     && providesJavaPackages(iu)) {
@@ -163,16 +165,7 @@ public class ProjectorResolutionStrategy extends AbstractSlicerResolutionStrateg
                     + newSelectionContext);
         }
 
-        resolutionResult.add(swtFragment);
-    }
-
-    private IInstallableUnit findSWTHostIU(Collection<IInstallableUnit> ius) {
-        for (IInstallableUnit iu : ius) {
-            if ("org.eclipse.swt".equals(iu.getId())) {
-                return iu;
-            }
-        }
-        return null;
+        ius.add(swtFragment);
     }
 
     private boolean providesJavaPackages(IInstallableUnit iu) {
diff --git a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ResolverDebugUtils.java b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ResolverDebugUtils.java
index 79729f6..4d3a219 100644
--- a/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ResolverDebugUtils.java
+++ b/tycho-bundles/org.eclipse.tycho.p2.resolver.impl/src/main/java/org/eclipse/tycho/p2/util/resolution/ResolverDebugUtils.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.query.QueryUtil;
 import org.eclipse.tycho.p2.maven.repository.xmlio.MetadataIO;
 
+@SuppressWarnings("restriction")
 class ResolverDebugUtils {
     public static String toDebugString(IQueryable<IInstallableUnit> ius, boolean verbose, IProgressMonitor monitor) {
         IQueryResult<IInstallableUnit> collector = ius.query(QueryUtil.ALL_UNITS, monitor);
-- 
1.9.1

